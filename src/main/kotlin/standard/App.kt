/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package standard

import io.vertx.core.DeploymentOptions
import io.vertx.core.Vertx
import io.vertx.core.VertxOptions
import io.vertx.core.eventbus.DeliveryOptions
import io.vertx.core.http.HttpServerOptions
import io.vertx.micrometer.*
import standard.api.ApiVerticle
import standard.codec.GenericCodec
import standard.dto.SearchDto
import standard.model.Portfolio
import standard.model.Trade
import standard.persistence.PersistenceServiceVertxEBProxy
import standard.persistence.PersistenceVerticle


class App {


    companion object {
        @JvmStatic
        fun main(args: Array<String>) {

            val vertx = Vertx.vertx(VertxOptions().setMetricsOptions(
                    MicrometerMetricsOptions()
                            // https://github.com/vert-x3/vertx-micrometer-metrics/issues/38
                            .addLabelMatch(Match()
                                    .setDomain(MetricsDomain.EVENT_BUS)
                                    .setType(MatchType.REGEX)
                                    .setLabel("address")
                                    .setValue("^\\d+$")
                                    .setAlias("reply-address"))
                            .setPrometheusOptions(VertxPrometheusOptions().setEnabled(true)
                                    .setStartEmbeddedServer(true)
                                    .setEmbeddedServerOptions(HttpServerOptions().setPort(8081)))
                            .setEnabled(true)
                            .addDisabledMetricsCategory(MetricsDomain.NAMED_POOLS)))

            vertx.eventBus().registerDefaultCodec(SearchDto::class.java, GenericCodec(SearchDto::class.java))
            vertx.eventBus().registerDefaultCodec(Trade::class.java, GenericCodec(Trade::class.java))
            vertx.eventBus().registerDefaultCodec(Portfolio::class.java, GenericCodec(Portfolio::class.java))
            vertx.eventBus().registerDefaultCodec(ArrayList::class.java, GenericCodec(ArrayList::class.java))

            val deliveryOptions = DeploymentOptions()

            vertx.deployVerticle(PersistenceVerticle(), deliveryOptions)
            vertx.deployVerticle(ApiVerticle(PersistenceServiceVertxEBProxy(vertx, "standard.persistence-service")))

        }
    }

}

